on:
  schedule:
    - cron: "*/15 * * * *"
  pull_request:
    branches:
      - master

name: Docker Build
jobs:
  latest-version:
    name: Get Latest Release
    runs-on: ubuntu-18.04
    outputs:
      latest_image_timestamp: "ts_${{ steps.latest_image_timestamp.outputs.timestamp }}"
      latest_release_timestamp: "ts_${{ steps.latest_release.outputs.latest_tag_published_at }}"
      latest_release_name: ${{ steps.latest_release.outputs.latest_tag }}
    steps:
    - name: Get the timestamp of the latest image on Docker Hub
      id: latest_image_timestamp
      run: |
        echo "::set-output name=timestamp::$(curl -L --silent https://registry.hub.docker.com/v2/repositories/orbsmiv/shairport-sync-rpi/tags/latest | python3 -c "import sys, json; print(json.load(sys.stdin)['last_updated'])")"
    - name: Get Latest Upstream Release
      id: latest_release
      env:
        OWNER: mikebrady
        REPO: shairport-sync
      run: |
        release_json=$(curl -L --silent https://api.github.com/repos/${OWNER}/${REPO}/releases/latest)
        echo "::set-output name=latest_tag::$(echo ${release_json} | python3 -c "import sys, json; print(json.load(sys.stdin)['tag_name'])")"
        echo "::set-output name=latest_tag_published_at::$(echo ${release_json} | python3 -c "import sys, json; print(json.load(sys.stdin)['published_at'])")"
  

  docker_buildx:
    runs-on: ubuntu-18.04
    needs: latest-version
    if: github.event_name == 'pull_request' || needs.latest-version.outputs.latest_release_timestamp > needs.latest-version.outputs.latest_image_timestamp
    steps:
      - name: New release notification
        if: needs.latest-version.outputs.latest_release_timestamp > needs.latest-version.outputs.latest_image_timestamp
        run: |
          echo "Version ${{ needs.latest-version.outputs.latest_release_name }} was released at ${{ needs.latest-version.outputs.latest_release_timestamp }}"
          echo "Latest tag published at ${{ needs.latest-version.outputs.latest_image_timestamp }}"
          echo "Release is newer than latest hub image. Build required."

      - name: Prepare
        id: prepare
        run: |
          echo ::set-output name=docker_platforms::linux/arm/v6,linux/arm/v7,linux/arm64
          echo ::set-output name=docker_username::orbsmiv
          echo ::set-output name=docker_image_testing::orbsmiv/testing
          echo ::set-output name=docker_image::orbsmiv/shairport-sync-rpi
          echo ::set-output name=short_hash::$(echo ${GITHUB_SHA} | cut -c1-7)

      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: crazy-max/ghaction-docker-buildx@v1.6.1
        with:
          buildx-version: latest
          qemu-version: latest

      - name: Available platforms and refs info
        run: |
          echo ${{ steps.buildx.outputs.platforms }}
          echo "We're building on the ${{ github.ref }} branch"

      - name: Run Buildx (no push-to-hub)
        run: |
          docker buildx build \
          --platform ${{ steps.prepare.outputs.docker_platforms }} \
          --output "type=image,push=false" \
          --build-arg "SHAIRPORT_VER=${{ needs.latest-version.outputs.latest_release_name }}" \
          --tag ${{ steps.prepare.outputs.docker_image }}:${{ needs.latest-version.outputs.latest_release_name }} \
          --tag ${{ steps.prepare.outputs.docker_image }}:latest \
          --file ./Dockerfile \
          .

      - name: Docker Login
        if: success()
        env:
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "${DOCKER_PASSWORD}" | docker login --username "${{ steps.prepare.outputs.docker_username }}" --password-stdin

      - name: Run Buildx (with push)
        if: success() && github.ref == 'refs/heads/master'
        run: |
          docker buildx build \
          --platform ${{ steps.prepare.outputs.docker_platforms }} \
          --output "type=image,push=true" \
          --build-arg "SHAIRPORT_VER=${{needs.latest-version.outputs.latest_release_name}}" \
          --tag ${{ steps.prepare.outputs.docker_image }}:${{needs.latest-version.outputs.latest_release_name}} \
          --tag ${{ steps.prepare.outputs.docker_image }}:latest \
          --file ./Dockerfile \
          .
          
      - name: Push pull request build to testing Docker Hub repo
        if: success() && github.event_name == 'pull_request'
        run: |
          docker buildx build \
          --platform ${{ steps.prepare.outputs.docker_platforms }} \
          --output "type=image,push=true" \
          --build-arg "SHAIRPORT_VER=${{needs.latest-version.outputs.latest_release_name}}" \
          --tag ${{ steps.prepare.outputs.docker_image_testing }}:shairport-sync-${{ steps.prepare.outputs.short_hash }} \
          --file ./Dockerfile \
          .
  

